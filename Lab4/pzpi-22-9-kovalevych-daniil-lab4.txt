Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

ЗВІТ
з лабораторної роботи №4
з дисципліни «Архітектура програмного забезпечення» з теми «Масштабування бекенда»

Виконала:	Перевірив:
ст. гр. ПЗПІ-22-9	Дашенков Д. С.
Ковалевич Данііл

Харків 2025

1 ІСТОРІЯ ЗМІН
№	Дата	Версія звіту	Опис змін та виправлень
1	17.06.2025	0.1	Створено розділ «Завдання»
2	17.06.2025	0.1	Створено розділ «Опис виконаної роботи»
3	17.06.2025	1.0	Додано висновки та додатки

2 ЗАВДАННЯ
– Розгорнути серверну частину системи у Kubernetes кластері.
– Масштабувати сервер горизонтально.
– Провести навантажувальне тестування через Locust.
– Показати залежність продуктивності від кількості реплік сервера.

3 ОПИС ВИКОНАНОЇ РОБОТИ
Для виконання лабораторної роботи було обрано стратегію горизонтального масштабування. Серверна частина системи (Node.js API з авторизацією) була контейнеризована за допомогою Docker та задеплоєна у Kubernetes-кластер через Minikube.
Kubernetes Deployment було налаштовано на запуск двох реплік сервера. Запити маршрутизуються через Kubernetes Service типу NodePort, що виконує роль внутрішнього балансувальника навантаження.
Для перевірки навантаження використано інструмент Locust. Кожен віртуальний користувач виконує вхід у систему через POST /login, отримує JWT-токен, і надсилає запити GET /vehicles із заголовком авторизації. Завдяки JWT-токену вдалося протестувати захищені маршрути.
Завдяки використанню параметра replicas у deployment.yaml було продемонстровано масштабування сервера. Збільшення кількості реплік дозволяє обробляти більшу кількість запитів за секунду без втрат продуктивності.

4 ВИСНОВКИ
У результаті виконання лабораторної роботи було реалізовано горизонтальне масштабування бекенду в Kubernetes кластері. Проведене навантажувальне тестування показало, що система здатна обробляти понад 20 запитів/сек без збоїв при 30 одночасних користувачах.
Отримано навички:
– розгортання сервісів у Minikube;
– роботи з YAML-конфігураціями для Kubernetes;
– створення та тестування навантаження через Locust;
– авторизації клієнтів та передачі токенів для API.
Система показала стабільну та масштабовану архітектуру, що може бути розширена у production-середовищі.
Додаток Б
ГРАФІЧНІ МАТЕРІАЛИ
 
Рисунок Б.1 — Скріншот роботи Locust при навантаженні (30 users)
 
Рисунок Б.2 — Статус Pod-ів у Kubernetes (`kubectl get pods`)
 
Рисунок Б.3 — Запуск сервісу через Minikube (`minikube service backend-service`)

Додаток В
ПРОГРАМНИЙ КОД

В.1 Docker-образ серверу
Репозиторій: https://github.com/NureKovalevychDaniil/apz-pzpi-22-9-kovalevych-daniil/blob/e3e61748a818267d1f1d5f6aec2ab785ca60f758/Lab4/pzpi-22-9-kovalevych-daniil-lab4/back-end/Dockerfile
В.2 Kubernetes деплоймент
Репозиторій: https://github.com/NureKovalevychDaniil/apz-pzpi-22-9-kovalevych-daniil/blob/e3e61748a818267d1f1d5f6aec2ab785ca60f758/Lab4/pzpi-22-9-kovalevych-daniil-lab4/k8s/deployment.yaml
В.3 Locust сценарій тестування
Репозиторій: https://github.com/NureKovalevychDaniil/apz-pzpi-22-9-kovalevych-daniil/blob/e3e61748a818267d1f1d5f6aec2ab785ca60f758/Lab4/pzpi-22-9-kovalevych-daniil-lab4/load-test/locustfile.py
